# Cloud-init configuration settings
cloud_init_config = {
  datastore_id = "local" # Datastore ID (default is "local")
  template = {
    dns_servers     = [] # Suggest using dns config on interface instead of this! List of DNS servers to use (e.g., ["1.1.1.1", "8.8.8.8"])
    ssh_public_key  = "" # SSH public key for authentication
    hashed_password = "" # Hashed password for the user (generate with `mkpasswd -m sha-512`)
    packages = [         # Default packages to install
      "qemu-guest-agent",
      "screen",
      "htop",
      "policycoreutils-python-utils"
    ]
    window_duration = "1h" # Auto reboot window duration of rebootmgr
    reboot_strategy = {    # Reboot strategy of rebootmgr
      rke2_nodes = "best-effort"
      lb_nodes   = "best-effort"
    }
    change_repo = false                                  # Disable default official repo and change it to custom
    repo_domain = "https://mirrors.bfsu.edu.cn/opensuse" # Repo url
    disable_rebootmgr = {                                # Whether enable auto reboot
      rke2_nodes = true                                  # disable when using krued to handle reboot request
      lb_nodes   = false
    }
    reboot_slots   = [17, 18, 19, 20, 21, 22] # Reboot time, hour in 24 format
    minute_offsets = [0, 15, 30, 45]          # add random minute of these vaule
    # Generated reboot time: 17:00 17:15 17:30 17:45 18:00 18:15 18:30 18:45 19:00...
  }
}

# Here are the cloud-init network-config settings
# You can choose to not provide settings bellow
# Terraform will set ens18 with dhcp enabled by default.
cloud_init_controlplane_network_config = {
  network_configs = [
    { # dhcp example on ens18 interface
      interface = "ens18"
      type      = "dhcp"
    },
    { # static ip example on ens19 interface
      interface      = "ens19"
      base_ip        = "192.168.1.0"   # Whole ipv4 address segment, common end with 0
      gateway        = "192.168.1.1"   # Optional, the gateway of this interface, If you do not have gateway, delete this line
      type           = "static"        # Type of this interface static to set ip address manually
      cidr_netmask   = 24              # Network mask in CIDR notation, 24 correspond to 255.255.255.0
      offset         = 1               # Set start ip of VMs in this class. In this case: 192.168.1.1 is the ip of first node, and 192.168.1.2 is the second node.
      dns_search     = ["lan"]         # Optional, DNS search path of this interface. If you want to use hostname with FQDN, you must set this field.
      dns_nameserver = ["192.168.1.1"] # Optional, DNS server enabled only on this interface
    }
  ]
}

cloud_init_worker_network_config = {
  network_configs = [
    { # dhcp example on ens18 interface
      interface = "ens18"
      type      = "dhcp"
    },
    { # static ip example on ens19 interface
      interface      = "ens19"
      base_ip        = "192.168.1.0"   # Whole ipv4 address segment, common end with 0
      gateway        = "192.168.1.1"   # Optional, the gateway of this interface, If you do not have gateway, delete this line
      type           = "static"        # Type of this interface static to set ip address manually
      cidr_netmask   = 24              # Network mask in CIDR notation, 24 correspond to 255.255.255.0
      offset         = 10              # Set start ip of VMs in this class. In this case: 192.168.1.10 is the ip of first node, and 192.168.1.11 is the second node.
      dns_search     = ["lan"]         # Optional, DNS search path of this interface. If you want to use hostname with FQDN, you must set this field.
      dns_nameserver = ["192.168.1.1"] # Optional, DNS server enabled only on this interface
    }
  ]
}

cloud_init_loadbalancer_network_config = {
  network_configs = [
    { # dhcp example on ens18 interface
      interface = "ens18"
      type      = "dhcp"
    },
    { # static ip example on ens19 interface
      interface      = "ens19"
      base_ip        = "192.168.1.0"   # Whole ipv4 address segment, common end with 0
      gateway        = "192.168.1.1"   # Optional, the gateway of this interface, If you do not have gateway, delete this line
      type           = "static"        # Type of this interface static to set ip address manually
      cidr_netmask   = 24              # Network mask in CIDR notation, 24 correspond to 255.255.255.0
      offset         = 20              # Set start ip of VMs in this class. In this case: 192.168.1.20 is the ip of first node, and 192.168.1.21 is the second node.
      dns_search     = ["lan"]         # Optional, DNS search path of this interface. If you want to use hostname with FQDN, you must set this field.
      dns_nameserver = ["192.168.1.1"] # Optional, DNS server enabled only on this interface
    }
  ]
}

# Proxmox provider authentication and SSH settings
cloud_provider = {
  endpoint  = ""   # Proxmox API endpoint (e.g., "https://your-proxmox-server:8006")
  api_token = ""   # Proxmox API token (format: "USER@REALM!TOKENID=UUID")
  insecure  = true # Set to true to skip TLS verification (not recommended for production)
  ssh = {
    agent       = true # Must set to true to provision cloudinit image
    username    = ""   # SSH username for VM access
    private_key = ""   # Path to SSH private key for VM access
  }
}

# OS image download configuration
image_download_config = {
  content_type       = "iso"                                                                                                      # Content type (default is "iso")
  datastore_id       = "local"                                                                                                    # Target datastore ID (default is "local")
  url                = "https://download.opensuse.org/tumbleweed/appliances/openSUSE-MicroOS.x86_64-OpenStack-Cloud.qcow2"        # OS image URL
  file_name          = "openSUSE-MicroOS.x86_64-OpenStack-Cloud.img"                                                              # Local filename (default is as shown)
  overwrite          = true                                                                                                       # Overwrite existing image (default is true)
  checksum_url       = "https://download.opensuse.org/tumbleweed/appliances/openSUSE-MicroOS.x86_64-OpenStack-Cloud.qcow2.sha256" # Checksum URL
  checksum_algorithm = "sha256"                                                                                                   # Checksum algorithm (default is "sha256")
}

# Map of VM names and their corresponding FQDNs
# The key you can set whatever you want, and value is the FQDN.
# You MUST set correct search path when using FQDN. Otherwise, you need edit inventory generated by terraform.
# If you use openwrt as router and you want to use subdomain for nodes, for example: `worker01.foo.bar.lan`
# You will need to edit the `/etc/dnsmasq.conf`
# Add something like `domain=foo.bar.lan,172.16.10.0/24` and remove domain line in `/etc/config/dhcp`
# Use worker01-foo-bar.lan is an alternative approach.
vms = {
  controlplane = {
    nodes = {
      "control0" = "ktest0.lan" # VM and FQDN of control plane
      "control1" = "ktest1.lan"
      "control2" = "ktest2.lan"
    }
  }
  loadbalancer = {
    nodes = {
      "lb0" = "kload0.lan" # VM and FQDN of load balancer
      "lb1" = "kload1.lan"
    }
  }
  worker = {
    nodes = {
      "worker0" = "kworker0.lan" # VM and FQDN of worker(agent) node
    }
  }
  # Comment out whole worker block
  # or
  # Set `worker = null`
  # to not deploy worker node
}

# Virtual machine hardware configuration of control plane node
controlplane_vm_config = {
  stop_on_destroy = true            # Stop VM on destroy (default true if QEMU agent not installed)
  vm_id_start     = 210             # Starting VM ID
  pool_id         = ""              # Pool ID of VM
  cpu_cores       = 2               # Number of CPU cores
  cpu_type        = "x86-64-v2-AES" # CPU type (default is "x86-64-v2-AES")
  mem_dedicated   = 8192            # Dedicated memory in MB
  mem_floating    = 4096            # Minimum memory in MB
  disk_size       = 50              # Disk size in GB
  disk_datastore  = "local"         # Disk datastore (default is "local")
  network_devices = [               # Define all of NICs. Every block in the list correspondent to a NIC.
    {                               # First NIC
      bridge   = "vmbr0"            # Required
      model    = "virtio"           # Optional, default is virtio
      vlan_id  = 100                # Optional, deafult is not use vlan
      mtu      = 1000               # Optional, default is auto
      firewall = false              # Optional, default is false
    },
    { # Second NIC
      bridge = "vmbr1"
      model  = "e1000"
      mtu    = 9000
    }
  ]
  qemu_agent_enabled = true # Enable QEMU agent (default is true)
}

# Virtual machine hardware configuration of worker(agent) node
worker_vm_config = {
  stop_on_destroy = true
  vm_id_start     = 220
  pool_id         = ""
  cpu_cores       = 2
  cpu_type        = "x86-64-v2-AES"
  mem_dedicated   = 2048
  mem_floating    = 2048
  disk_size       = 50
  disk_datastore  = "local"
  network_devices = [     # Define all of NICs. Every block in the list correspondent to a NIC.
    {                     # First NIC
      bridge   = "vmbr0"  # Required
      model    = "virtio" # Optional, default is virtio
      vlan_id  = 100      # Optional, deafult is not use vlan
      mtu      = 1000     # Optional, default is auto
      firewall = false    # Optional, default is false
    },
    { # Second NIC
      bridge = "vmbr1"
      model  = "e1000"
      mtu    = 9000
    }
  ]
  qemu_agent_enabled = true
}

# Virtual machine hardware configuration of load balancer node
loadbalancer_vm_config = {
  stop_on_destroy = true            # Stop VM on destroy (default true if QEMU agent not installed)
  vm_id_start     = 200             # Starting VM ID
  pool_id         = ""              # Pool ID of VM
  cpu_cores       = 2               # Number of CPU cores
  cpu_type        = "x86-64-v2-AES" # CPU type (default is "x86-64-v2-AES")
  mem_dedicated   = 1024            # Dedicated memory in MB
  mem_floating    = 1024            # Minimum memory in MB
  disk_size       = 50              # Disk size in GB
  disk_datastore  = "local"         # Disk datastore (default is "local")
  network_devices = [               # Define all of NICs. Every block in the list correspondent to a NIC.
    {                               # First NIC
      bridge   = "vmbr0"            # Required
      model    = "virtio"           # Optional, default is virtio
      vlan_id  = 100                # Optional, deafult is not use vlan
      mtu      = 1000               # Optional, default is auto
      firewall = false              # Optional, default is false
    },
    { # Second NIC
      bridge = "vmbr1"
      model  = "e1000"
      mtu    = 9000
    }
  ]
  qemu_agent_enabled = true # Enable QEMU agent (default is true)
}

rke2_cloud_init_extra_packages         = ["rke2", "rke2-selinux", "open-iscsi", "nfs-client"] # Extra packages to add to rke2 nodes
loadbalancer_cloud_init_extra_packages = ["haproxy", "keepalived"]                            # Extra packages to add to loadbalancer nodes

available_nodes = {             # PVE Nodes you want to deploy RKE2 cluster. Every type of VM will assigned to each node by polling strategy.
  storage0-pve = "storage0-pve" # Due to the useage of map structure, the KEY and VALUE MUST be same.
  compute0-pve = "compute0-pve"
  compute1-pve = "compute1-pve"
}

# IF you have a vms variable the polling strategy will assigned them like this
# vms = {
#   controlplane = {
#     nodes = {
#       "control0" = "ktest0.lan" -> storage0-pve
#       "control1" = "ktest1.lan" -> compute0-pve
#       "control2" = "ktest2.lan" -> compute1-pve
#       "control3" = "ktest3.lan" -> storage0-pve
#       "control4" = "ktest4.lan" -> compute0-pve
#       ...
#     }
#   }
#   loadbalancer = {
#     nodes = {
#       "lb0" = "kload0.lan" -> storage0-pve
#       "lb1" = "kload1.lan" -> compute0-pve
#       ...
#     }
#   }
#   worker = {
#     nodes = {
#       "worker0" = "kworker0.lan" -> storage0-pve
#       ...
#     }
#   }
# }
